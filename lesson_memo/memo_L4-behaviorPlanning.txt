-------- 11. Behavior Planning Pseudocode

def transition_function(predictions, current_fsm_state, current_pose, cost_functions, weights):
    # only consider states which can be reached from current FSM state.
    possible_successor_states = successor_states(current_fsm_state)

    # keep track of the total cost of each state.
    costs = []
    for state in possible_successor_states:
        # generate a rough idea of what trajectory we would
        # follow IF we chose this state.
        trajectory_for_state = generate_trajectory(state, current_pose, predictions)

        # calculate the "cost" associated with that trajectory.
        cost_for_state = 0
        for i in range(len(cost_functions)) :
            # apply each cost function to the generated trajectory
            cost_function = cost_functions[i]
            cost_for_cost_function = cost_function(trajectory_for_state, predictions)

            # multiply the cost by the associated weight
            weight = weights[i]
            cost_for_state += weight * cost_for_cost_function
         costs.append({'state' : state, 'cost' : cost_for_state})

    # Find the minimum cost state.
    best_next_state = None
    min_cost = 9999999
    for i in range(len(possible_successor_states)):
        state = possible_successor_states[i]
        cost  = costs[i]
        if cost < min_cost:
            min_cost = cost
            best_next_state = state 

    return best_next_state


------ 15. Implement a Cost Function in C++ (solution)

float goal_distance_cost(int goal_lane, int intended_lane, int final_lane, float distance_to_goal) {
    /*
    The cost increases with both the distance of intended lane from the goal
    and the distance of the final lane from the goal. The cost of being out of the 
    goal lane also becomes larger as vehicle approaches the goal.
    */
    int delta_d = 2.0*goal_lane - intended_lane - final_lane;
    float cost = 1 - exp(-(abs(delta_d) / distance_to_goal));
    return cost;
}

----- 16. Implement a Second Cost Function in C++

float inefficiency_cost(int target_speed, int intended_lane, int final_lane, vector<int> lane_speeds) {
    /*
    Cost becomes higher for trajectories with intended lane and final lane that have traffic slower than target_speed.
    */

    float speed_intended = lane_speeds[intended_lane];
    float speed_final = lane_speeds[final_lane];
    float cost = (2.0*target_speed - speed_intended - speed_final)/target_speed;
    return cost;
}

-------- 18. Cost Function Design and Weight Tweaking
transcript
----./10 - 14 L CostFunctionDesignWeightTweaking - lang_en_vs1.srt----
0	 Designing cost functions is difficult and getting them all to cooperate to produce reasonable vehicle behavior is hard.
1	Some of the difficulties associated with cost functions design include solving new problems without unsolving old ones.
2	When you're working on a self-driving car, you may find that the vehicle is behaving reasonably well except for some particular situations.
3	Maybe it's not being aggressive enough about making left turns at traffic lights.
4	So, in an effort to solve this problem, you either add new cost functions, tweak existing ones, or modify the weights.
5	But every time you do, there's a chance that you will introduce some breaking change into something that already works.
6	In practice, we solve this through regression testing, where we define some set of situations, each of which has an expected behavior.
7	Then, whenever we make a change, we simulate the vehicle in all of our test cases and make sure that it still behaves as expected.
8	We won't say more about testing here, but it is an important part of developing software in a safety-critical application.
9	The next difficulty is balancing costs of drastically different magnitudes.
10	Because, yes, we want to get to our destination efficiently, but if we are in a situation where safety is an issue, we want to solve that problem and not think about efficiency at all.
11	One way to do that is to have weights which reflect the type of problem the cost function addresses.
12	So we want to most heavily penalize any behavior which simply isn't possible due to physics, then we want to think about safety, legality, comfort.
13	And only once those are satisfied do we want to think about efficiency.
14	But we also may want to adjust the relative importance of these weights depending on situation.
15	If a light turns red, for example, legality becomes a much more relevant concern than when we engage in normal highway driving.
16	And this leads us to our last difficulty, reasoning about individual cost functions.
17	Ideally, each cost function will serve a very specific responsibility, which is something we didn't do in our earlier example of a speed cost function.
18	We were trying to balance our desire to drive quickly, which has to do with efficiency, with our desire to not exceed the speed limit, which is legality.
19	In practice, we might want to define several cost functions associated with vehicle speed.
20	In which case we might have a binary cost function which just checks to see if we are breaking the speed limit and the continuous cost function which pulls us towards our target speed.
21	By assigning each cost function to a very specific role, like safety versus legality versus efficiency, we can then standardize the output of all cost functions to be between -1 and 1.
22	Additionally, it's helpful to parametrize whenever possible.
23	This allows us to use some parameter optimization technique like gradient descent along with our set of regression tests to programmatically tweak our cost functions.
24	Finally, thinking in terms of vehicle state is helpful.
25	The things we can indirectly control about our vehicle are its position, velocity, and acceleration.
26	It can be helpful to keep these in mind when coming up with cost functions.
27	Let's walk through an example.
28	Say we want to think about the following classes of cost functions.
29	And to make it easier, to keep everything straight, let's think in terms of position, velocity, and acceleration.
30	The binary "Are we exceeding the speed?" cost function would go here, then the cost function that wanted to keep us close to the speed limit would go here.
31	And now, instead of being that weird discontinuous graph we made earlier, this could just be some parabola like this.
32	And even though the cost of this is low even for speeds that exceed the speed limit, that's OK because we have our binary cost function which would prevent that behavior.
33	Continuing to think about speed, we also might want to try to drive at a speed that's close to the average speed of traffic, for safety reasons, even if that speed is above or below the speed limit.
34	And that would go here.
35	In the position column, we'd have an obvious feasibility concern which is collision avoidance.
36	We can't drive somewhere if there is already a car there.
37	Then, for safety reasons, we would want the buffer distance, which tries to keep us far from other vehicles, and the cost function which checks to make sure we are driving on the road near the center of our lane and in a lane that's close to our goal lane.
38	For acceleration, we'd first want to make sure we only consider behaviors that the car can execute, and then we'd want to avoid having any rapid changes in acceleration because those are perceived as uncomfortable.
39	This is also known as jerk which you'll learn more about in the next lesson.
40	Consider a merge onto a highway, for example.
41	This is a potentially dangerous situation where we really want to get up to traffic speed as quickly as possible.
42	So this cost function may become more relevant than it normally is.
43	But we also want to make sure that we yield if there isn't really a gap, so we want to make sure this cost function and this one are weighted sufficiently high.
44	And we can compare these merge priorities to a different situation.
45	For example, a car approaching a green light that suddenly turns yellow.
46	In this situation, we'd probably want to boost the weights associated with legality and would probably need to add a whole new cost function for obeying traffic rules.
47	Now that doesn't fall neatly into the position, velocity, or acceleration classes, so I'll just put it over here.
48	If this is all starting to feel like it's getting pretty complex, well, you're right.
49	It's pretty hard to avoid this exploding complexity when using finite state machines.
50	Partially that's because of the finite state machine itself, but we're also trying to solve a very hard problem and some complexity is unavoidable no matter what solution approach you take.
---------------
0	コスト関数の設計は困難であり、合理的な車両挙動を生み出すためにそれらをすべて協力させることは困難です。
1	コスト関数設計に関連する困難のいくつかは、古いものを解くことなく新しい問題を解決することを含む。
2	自走車で作業しているときは、特定の状況を除いて車両が適切に動作していることがあります。
3	おそらく、信号を左折させることについて十分に積極的ではないでしょう。
4	したがって、この問題を解決するために、新しいコスト関数を追加するか、既存のコスト関数を調整するか、または重みを変更します。
5	しかし、あなたがそうするたびに、すでに働いているものにいくつかの大きな変化を導入する機会があります。
6	実際には、これを回帰テストによって解決します。回帰テストでは、それぞれが予想される動作を持つ一連の状況を定義します。
7	その後、変更を行うたびに、すべてのテストケースで車両をシミュレートし、期待どおりに動作することを確認します。
8	ここでのテストについては詳しく述べませんが、安全性が重要なアプリケーションでソフトウェアを開発する上で重要な部分です。
9	次の難しさは、大幅に異なる規模のコストのバランスを取ることです。
10	はい、私たちは効率的に目的地に行きたいと思っていますが、安全が問題となる状況にあるならば、その問題を解決し、効率について全く考えないことが望まれます。
11	これを行う1つの方法は、コスト関数が扱う問題のタイプを反映する重みを持たせることです。
12	だから、私たちは、物理学のために単純には不可能だった行動を最も重くしたいと思っています。そして、安全性、合法性、快適性について考えてみたいと思います。
13	一度満足すれば、効率性について考える必要があります。
14	しかし、状況に応じてこれらの重みの相対的重要度を調整することもできます。
15	たとえば、ライトが赤色に変わった場合、合法性は、通常のハイウェー運転に従事する場合よりもはるかに適切な関心事になります。
16	そして、これは私たちの最後の難しさにつながり、個々の費用関数について推論します。
17	理想的には、各コスト関数は非常に具体的な責任を果たします。これは、以前のスピードコスト関数の例では行わなかったことです。
18	私たちは、効率と関係がある迅速な運転の欲求と、合法性であるスピード制限を超えない欲求とのバランスを取ろうと努めていました。
19	実際には、車速に関連するいくつかのコスト関数を定義することが必要な場合があります。
20	この場合、私たちが速度制限を破っているかどうかを確認するバイナリコスト関数と、目標速度に向かって私たちを引き付ける連続コスト関数を持つかもしれません。
21	各コスト関数を安全性対合法性のような非常に特殊な役割に割り当てることによって、すべてのコスト関数の出力を-1と1の間で標準化することができます。
22	さらに、可能な限りパラメータ化すると便利です。
23	これにより、勾配降下のようなパラメータ最適化手法を使用して、回帰テストのセットを使用して、コスト関数をプログラムで調整することができます。
24	最後に、車両の状態を考えることが有用です。
25	私たちが間接的にコントロールできるのは、位置、速度、加速度です。
26	コスト関数を考案する際には、これらのことを覚えておいてください。
27	例を見てみましょう。
28	以下のクラスのコスト関数について考えてみたいとします。
29	すべてをまっすぐに保つために、位置、速度、および加速度に関して考えてみましょう。
30	バイナリは "スピードを上回っていますか？"コスト関数がここにくると、速度制限に近づけるためのコスト関数がここに入ります。
31	そして今、私たちが先に作った不思議な不連続グラフではなく、これはこのような放物線にすぎません。
32	速度制限を超える速度であっても、このコストは低くても、バイナリ・コスト関数があるため、その動作を妨げることはできません。
33	引き続き速度について考えると、たとえ速度が制限速度を上回っても下回っていても、安全上の理由から、平均交通速度に近い速度で運転しようとする場合があります。
34	それはここに行くだろう。
35	ポジション欄には、衝突回避という明らかな実現可能性の懸念があります。
36	既に車があれば、どこかで運転することはできません。
37	安全上の理由から、私たちは、他の車両との距離を遠ざけようとするバッファー距離と、車線の中央付近の道路と近くにある車線を走行していることを確認するコスト関数私たちの目標レーンへ。
38	加速のためには、まず自動車が実行できる行動だけを考慮して、それから不快感を感じるので急激な加速変化を避けたいと考えています。
39	これはジャークとも呼ばれ、次のレッスンで詳しく学習します。
40	たとえば、高速道路へのマージを考えてみましょう。
41	これは潜在的に危険な状況であり、実際にはできるだけ早く交通速度に乗りたいと考えています。
42	したがって、このコスト関数は、通常よりも関連性が高くなる可能性があります。
43	しかし、実際にギャップがないかどうかを確かめたいので、このコスト関数とこれが十分に高い重み付けされていることを確認したい。
44	これらのマージ優先順位を別の状況と比較できます。
45	例えば、突然黄色に変わる緑色の光に近づいている車。
46	このような状況では、合法性に関連した重み付けを強化し、おそらく交通ルールに従うために全く新しいコスト関数を追加する必要があるでしょう。
47	今は、位置、速度、または加速クラスにうまく収まらないので、ここでそれを説明します。
48	これがかなり複雑になってきているように感じるようになったら、そうです。
49	有限状態マシンを使用する場合、この複雑な複雑さを避けるのはかなり難しいです。
50	部分的には有限状態機械自体のためですが、我々はまた非常に難しい問題を解決しようとしており、どのような解決方法を取っても、いくらかの複雑さは避けられません。

------------------------------------------

----11 - 16 L SchedulingComputeTime - lang_en_vs1.srt----
0	 In the very beginning of the lesson you have already seen this diagram.
1	By now you might be able to guess why the Behavior Module updates on a lower frequency than for example the Trajectory Module.
2	This is due to the fact that the high level decisions made in the behavior module spend a longer time horizon and just don't change as frequently.
3	But the Trajectory Module does still count on our decisions and it's important that the over all system architecture doesn't allow for a comparatively slow module like the behavior planner to clock up the proper functioning of the other faster components.
4	Let's take a second to talk about what's known as a scheduling problem and how it can be handled in the self-driving car.
5	This diagram shows what happens during two processing cycles of the Behavior Module.
6	As you can see, the Prediction Module updates with a higher frequency than Behavior.
7	Trajectory is even higher. And so on.
8	But focus your attention on what happens after behavior has completed its first cycle.
9	To begin its second cycle, the behavior module needs data from prediction and localization.
10	For localization, it's easy in theory since at this instant it will have some fresh data and behavior could just use that.
11	But what about for prediction.
12	It's actually right in the middle of an update cycle at this instant.
13	Should behavior just wait until prediction is done? No. If we start waiting then we block up the pipeline for downstream components.
14	The answer is to use data from here and accept that it's a little stale.
15	When you implement your half planner for the final project, we will provide you with the code that handles all of this.
16	But it's worth mentioning that this is how it's done.
---------------
0	レッスンの初めに、あなたは既にこの図を見てきました。
1	今では、行動モジュールが、例えば軌道モジュールよりも低い頻度で更新する理由を推測することができます。
2	これは、行動モジュールの上位レベルの決定がより長い時間を費やし、頻繁に変更されないという事実によるものです。
3	しかし、軌道モジュールは依然として私たちの決定に左右されます。全体的なシステムアーキテクチャでは、行動計画のような比較的遅いモジュールでは、他のより高速なコンポーネントの適切な機能を強化することができません。
4	スケジューリング問題として知られていることと、それが自家用車でどのように処理されるかについて、もう一度話しましょう。
5	この図は、行動モジュールの2つの処理サイクルの間に何が起こるかを示しています。
6	ご覧のように、予測モジュールは行動より高い頻度で更新されます。
7	軌道はさらに高い。等々。
8	しかし、行動が最初のサイクルを完了した後に起こることに注意を集中させてください。
9	2番目のサイクルを開始するには、ビヘイビアモジュールに予測とローカライゼーションのデータが必要です。
10	ローカリゼーションの場合は、理論的には簡単です。この時点では、新しいデータがいくつかあり、動作はそれを使用できるだけです。
11	しかし、予測はどうでしょうか。
12	実際には、この瞬間に更新サイクルの真っ只中です。
13	行動は予測が完了するまで待つだけですか？いいえ。待機する場合は、下流のコンポーネントのパイプラインをブロックします。
14	答えは、ここからのデータを使用して、それがちょっと古いと受け入れることです。
15	最終的なプロジェクトのためにハーフプランナーを実装するときは、このすべてを処理するコードを提供します。
16	しかし、これはそれが完了した方法であることに言及する価値があります。
---------------

-------- 22.Implement Behavior Planner in C++
--- main.cpp
#include "road.h"
#include "vehicle.h"
#include <iostream>
#include <fstream>
#include <math.h>
#include <vector>

using namespace std;

//impacts default behavior for most states
int SPEED_LIMIT = 10;

//all traffic in lane (besides ego) follow these speeds
vector<int> LANE_SPEEDS = {6,7,8,9}; 

//Number of available "cells" which should have traffic
double TRAFFIC_DENSITY   = 0.15;

// At each timestep, ego can set acceleration to value between 
// -MAX_ACCEL and MAX_ACCEL
int MAX_ACCEL = 2;

// s value and lane number of goal.
vector<int> GOAL = {300, 0};

// These affect the visualization
int FRAMES_PER_SECOND = 4;
int AMOUNT_OF_ROAD_VISIBLE = 40;

int main() {
 
	Road road = Road(SPEED_LIMIT, TRAFFIC_DENSITY, LANE_SPEEDS);

	road.update_width = AMOUNT_OF_ROAD_VISIBLE;

	road.populate_traffic();

	int goal_s = GOAL[0];
	int goal_lane = GOAL[1];

	//configuration data: speed limit, num_lanes, goal_s, goal_lane, max_acceleration

	int num_lanes = LANE_SPEEDS.size();
	vector<int> ego_config = {SPEED_LIMIT,num_lanes,goal_s,goal_lane,MAX_ACCEL};
	 
	road.add_ego(2,0, ego_config);
	int timestep = 0;
	
	while (road.get_ego().s <= GOAL[0]) {
		timestep++;
		if (timestep > 100) {
			break;
		}
		road.advance();
		road.display(timestep);
		//time.sleep(float(1.0) / FRAMES_PER_SECOND);
	}
	Vehicle ego = road.get_ego();
	if (ego.lane == GOAL[1])
	{
		cout << "You got to the goal in " << timestep << " seconds!" << endl;
		if(timestep > 35)
	    {
	        cout << "But it took too long to reach the goal. Go faster!" << endl;
	    }
	}
	else
	{
		cout << "You missed the goal. You are in lane " << ego.lane << " instead of " << GOAL[1] << "." << endl;
	}

	return 0;
}


---- vehicle.cpp
#include <algorithm>
#include <iostream>
#include "vehicle.h"
#include <cmath>
#include <map>
#include <string>
#include <iterator>
#include "cost.h"

/**
 * Initializes Vehicle
 */

Vehicle::Vehicle(){}

Vehicle::Vehicle(int lane, float s, float v, float a, string state) {

    this->lane = lane;
    this->s = s;
    this->v = v;
    this->a = a;
    this->state = state;
    max_acceleration = -1;

}

Vehicle::~Vehicle() {}


vector<Vehicle> Vehicle::choose_next_state(map<int, vector<Vehicle>> predictions) {
    /*
    Here you can implement the transition_function code from the Behavior Planning Pseudocode
    classroom concept. Your goal will be to return the best (lowest cost) trajectory corresponding
    to the next state.

    INPUT: A predictions map. This is a map of vehicle id keys with predicted
        vehicle trajectories as values. Trajectories are a vector of Vehicle objects representing
        the vehicle at the current timestep and one timestep in the future.
    OUTPUT: The the best (lowest cost) trajectory corresponding to the next ego vehicle state.

    */
    vector<string> states = successor_states();
    float cost;
    vector<float> costs;
    vector<string> final_states;
    vector<vector<Vehicle>> final_trajectories;

    for (vector<string>::iterator it = states.begin(); it != states.end(); ++it) {
        vector<Vehicle> trajectory = generate_trajectory(*it, predictions);
        if (trajectory.size() != 0) {
            cost = calculate_cost(*this, predictions, trajectory);
            costs.push_back(cost);
            final_trajectories.push_back(trajectory);
        }
    }

    vector<float>::iterator best_cost = min_element(begin(costs), end(costs));
    int best_idx = distance(begin(costs), best_cost);
    return final_trajectories[best_idx];
}

vector<string> Vehicle::successor_states() {
    /*
    Provides the possible next states given the current state for the FSM 
    discussed in the course, with the exception that lane changes happen 
    instantaneously, so LCL and LCR can only transition back to KL.
    */
    vector<string> states;
    states.push_back("KL");
    string state = this->state;
    if(state.compare("KL") == 0) {
        states.push_back("PLCL");
        states.push_back("PLCR");
    } else if (state.compare("PLCL") == 0) {
        if (lane != lanes_available - 1) {
            states.push_back("PLCL");
            states.push_back("LCL");
        }
    } else if (state.compare("PLCR") == 0) {
        if (lane != 0) {
            states.push_back("PLCR");
            states.push_back("LCR");
        }
    }
    //If state is "LCL" or "LCR", then just return "KL"
    return states;
}

vector<Vehicle> Vehicle::generate_trajectory(string state, map<int, vector<Vehicle>> predictions) {
    /*
    Given a possible next state, generate the appropriate trajectory to realize the next state.
    */
    vector<Vehicle> trajectory;
    if (state.compare("CS") == 0) {
        trajectory = constant_speed_trajectory();
    } else if (state.compare("KL") == 0) {
        trajectory = keep_lane_trajectory(predictions);
    } else if (state.compare("LCL") == 0 || state.compare("LCR") == 0) {
        trajectory = lane_change_trajectory(state, predictions);
    } else if (state.compare("PLCL") == 0 || state.compare("PLCR") == 0) {
        trajectory = prep_lane_change_trajectory(state, predictions);
    }
    return trajectory;
}

vector<float> Vehicle::get_kinematics(map<int, vector<Vehicle>> predictions, int lane) {
    /* 
    Gets next timestep kinematics (position, velocity, acceleration) 
    for a given lane. Tries to choose the maximum velocity and acceleration, 
    given other vehicle positions and accel/velocity constraints.
    */
    float max_velocity_accel_limit = this->max_acceleration + this->v;
    float new_position;
    float new_velocity;
    float new_accel;
    Vehicle vehicle_ahead;
    Vehicle vehicle_behind;

    if (get_vehicle_ahead(predictions, lane, vehicle_ahead)) {

        if (get_vehicle_behind(predictions, lane, vehicle_behind)) {
            new_velocity = vehicle_ahead.v; //must travel at the speed of traffic, regardless of preferred buffer
        } else {
            float max_velocity_in_front = (vehicle_ahead.s - this->s - this->preferred_buffer) + vehicle_ahead.v - 0.5 * (this->a);
            new_velocity = min(min(max_velocity_in_front, max_velocity_accel_limit), this->target_speed);
        }
    } else {
        new_velocity = min(max_velocity_accel_limit, this->target_speed);
    }
    
    new_accel = new_velocity - this->v; //Equation: (v_1 - v_0)/t = acceleration
    new_position = this->s + new_velocity + new_accel / 2.0;
    return{new_position, new_velocity, new_accel};
    
}

vector<Vehicle> Vehicle::constant_speed_trajectory() {
    /*
    Generate a constant speed trajectory.
    */
    float next_pos = position_at(1);
    vector<Vehicle> trajectory = {Vehicle(this->lane, this->s, this->v, this->a, this->state), 
                                  Vehicle(this->lane, next_pos, this->v, 0, this->state)};
    return trajectory;
}

vector<Vehicle> Vehicle::keep_lane_trajectory(map<int, vector<Vehicle>> predictions) {
    /*
    Generate a keep lane trajectory.
    */
    vector<Vehicle> trajectory = {Vehicle(lane, this->s, this->v, this->a, state)};
    vector<float> kinematics = get_kinematics(predictions, this->lane);
    float new_s = kinematics[0];
    float new_v = kinematics[1];
    float new_a = kinematics[2];
    trajectory.push_back(Vehicle(this->lane, new_s, new_v, new_a, "KL"));
    return trajectory;
}

vector<Vehicle> Vehicle::prep_lane_change_trajectory(string state, map<int, vector<Vehicle>> predictions) {
    /*
    Generate a trajectory preparing for a lane change.
    */
    float new_s;
    float new_v;
    float new_a;
    Vehicle vehicle_behind;
    int new_lane = this->lane + lane_direction[state];
    vector<Vehicle> trajectory = {Vehicle(this->lane, this->s, this->v, this->a, this->state)};
    vector<float> curr_lane_new_kinematics = get_kinematics(predictions, this->lane);

    if (get_vehicle_behind(predictions, this->lane, vehicle_behind)) {
        //Keep speed of current lane so as not to collide with car behind.
        new_s = curr_lane_new_kinematics[0];
        new_v = curr_lane_new_kinematics[1];
        new_a = curr_lane_new_kinematics[2];
        
    } else {
        vector<float> best_kinematics;
        vector<float> next_lane_new_kinematics = get_kinematics(predictions, new_lane);
        //Choose kinematics with lowest velocity.
        if (next_lane_new_kinematics[1] < curr_lane_new_kinematics[1]) {
            best_kinematics = next_lane_new_kinematics;
        } else {
            best_kinematics = curr_lane_new_kinematics;
        }
        new_s = best_kinematics[0];
        new_v = best_kinematics[1];
        new_a = best_kinematics[2];
    }

    trajectory.push_back(Vehicle(this->lane, new_s, new_v, new_a, state));
    return trajectory;
}

vector<Vehicle> Vehicle::lane_change_trajectory(string state, map<int, vector<Vehicle>> predictions) {
    /*
    Generate a lane change trajectory.
    */
    int new_lane = this->lane + lane_direction[state];
    vector<Vehicle> trajectory;
    Vehicle next_lane_vehicle;
    //Check if a lane change is possible (check if another vehicle occupies that spot).
    for (map<int, vector<Vehicle>>::iterator it = predictions.begin(); it != predictions.end(); ++it) {
        next_lane_vehicle = it->second[0];
        if (next_lane_vehicle.s == this->s && next_lane_vehicle.lane == new_lane) {
            //If lane change is not possible, return empty trajectory.
            return trajectory;
        }
    }
    trajectory.push_back(Vehicle(this->lane, this->s, this->v, this->a, this->state));
    vector<float> kinematics = get_kinematics(predictions, new_lane);
    trajectory.push_back(Vehicle(new_lane, kinematics[0], kinematics[1], kinematics[2], state));
    return trajectory;
}

void Vehicle::increment(int dt = 1) {
	this->s = position_at(dt);
}

float Vehicle::position_at(int t) {
    return this->s + this->v*t + this->a*t*t/2.0;
}

bool Vehicle::get_vehicle_behind(map<int, vector<Vehicle>> predictions, int lane, Vehicle & rVehicle) {
    /*
    Returns a true if a vehicle is found behind the current vehicle, false otherwise. The passed reference
    rVehicle is updated if a vehicle is found.
    */
    int max_s = -1;
    bool found_vehicle = false;
    Vehicle temp_vehicle;
    for (map<int, vector<Vehicle>>::iterator it = predictions.begin(); it != predictions.end(); ++it) {
        temp_vehicle = it->second[0];
        if (temp_vehicle.lane == this->lane && temp_vehicle.s < this->s && temp_vehicle.s > max_s) {
            max_s = temp_vehicle.s;
            rVehicle = temp_vehicle;
            found_vehicle = true;
        }
    }
    return found_vehicle;
}

bool Vehicle::get_vehicle_ahead(map<int, vector<Vehicle>> predictions, int lane, Vehicle & rVehicle) {
    /*
    Returns a true if a vehicle is found ahead of the current vehicle, false otherwise. The passed reference
    rVehicle is updated if a vehicle is found.
    */
    int min_s = this->goal_s;
    bool found_vehicle = false;
    Vehicle temp_vehicle;
    for (map<int, vector<Vehicle>>::iterator it = predictions.begin(); it != predictions.end(); ++it) {
        temp_vehicle = it->second[0];
        if (temp_vehicle.lane == this->lane && temp_vehicle.s > this->s && temp_vehicle.s < min_s) {
            min_s = temp_vehicle.s;
            rVehicle = temp_vehicle;
            found_vehicle = true;
        }
    }
    return found_vehicle;
}

vector<Vehicle> Vehicle::generate_predictions(int horizon) {
    /*
    Generates predictions for non-ego vehicles to be used
    in trajectory generation for the ego vehicle.
    */
	vector<Vehicle> predictions;
    for(int i = 0; i < horizon; i++) {
      float next_s = position_at(i);
      float next_v = 0;
      if (i < horizon-1) {
        next_v = position_at(i+1) - s;
      }
      predictions.push_back(Vehicle(this->lane, next_s, next_v, 0));
  	}
    return predictions;

}

void Vehicle::realize_next_state(vector<Vehicle> trajectory) {
    /*
    Sets state and kinematics for ego vehicle using the last state of the trajectory.
    */
    Vehicle next_state = trajectory[1];
    this->state = next_state.state;
    this->lane = next_state.lane;
    this->s = next_state.s;
    this->v = next_state.v;
    this->a = next_state.a;
}

void Vehicle::configure(vector<int> road_data) {
    /*
    Called by simulator before simulation begins. Sets various
    parameters which will impact the ego vehicle. 
    */
    target_speed = road_data[0];
    lanes_available = road_data[1];
    goal_s = road_data[2];
    goal_lane = road_data[3];
    max_acceleration = road_data[4];
}

---- vehicle.h
#ifndef VEHICLE_H
#define VEHICLE_H
#include <iostream>
#include <random>
#include <vector>
#include <map>
#include <string>

using namespace std;

class Vehicle {
public:

  map<string, int> lane_direction = {{"PLCL", 1}, {"LCL", 1}, {"LCR", -1}, {"PLCR", -1}};

  struct collider{

    bool collision ; // is there a collision?
    int  time; // time collision happens

  };

  int L = 1;

  int preferred_buffer = 6; // impacts "keep lane" behavior.

  int lane;

  int s;

  float v;

  float a;

  float target_speed;

  int lanes_available;

  float max_acceleration;

  int goal_lane;

  int goal_s;

  string state;

  /**
  * Constructor
  */
  Vehicle();
  Vehicle(int lane, float s, float v, float a, string state="CS");

  /**
  * Destructor
  */
  virtual ~Vehicle();

  vector<Vehicle> choose_next_state(map<int, vector<Vehicle>> predictions);

  vector<string> successor_states();

  vector<Vehicle> generate_trajectory(string state, map<int, vector<Vehicle>> predictions);

  vector<float> get_kinematics(map<int, vector<Vehicle>> predictions, int lane);

  vector<Vehicle> constant_speed_trajectory();

  vector<Vehicle> keep_lane_trajectory(map<int, vector<Vehicle>> predictions);

  vector<Vehicle> lane_change_trajectory(string state, map<int, vector<Vehicle>> predictions);

  vector<Vehicle> prep_lane_change_trajectory(string state, map<int, vector<Vehicle>> predictions);

  void increment(int dt);

  float position_at(int t);

  bool get_vehicle_behind(map<int, vector<Vehicle>> predictions, int lane, Vehicle & rVehicle);

  bool get_vehicle_ahead(map<int, vector<Vehicle>> predictions, int lane, Vehicle & rVehicle);

  vector<Vehicle> generate_predictions(int horizon=2);

  void realize_next_state(vector<Vehicle> trajectory);

  void configure(vector<int> road_data);

};

#endif


---- cost.cpp
#include "cost.h"
#include "vehicle.h"
#include <functional>
#include <iterator>
#include <map>
#include <math.h>

const float REACH_GOAL = pow(10, 6);
const float EFFICIENCY = pow(10, 5);


float goal_distance_cost(const Vehicle & vehicle, const vector<Vehicle> & trajectory, const map<int, vector<Vehicle>> & predictions, map<string, float> & data) {
    /*
    Cost increases based on distance of intended lane (for planning a lane change) and final lane of trajectory.
    Cost of being out of goal lane also becomes larger as vehicle approaches goal distance.
    */
    float cost;
    float distance = data["distance_to_goal"];
    if (distance > 0) {
        cost = 1 - 2*exp(-(abs(2.0*vehicle.goal_lane - data["intended_lane"] - data["final_lane"]) / distance));
    } else {
        cost = 1;
    }
    return cost;
}

float inefficiency_cost(const Vehicle & vehicle, const vector<Vehicle> & trajectory, const map<int, vector<Vehicle>> & predictions, map<string, float> & data) {
    /*
    Cost becomes higher for trajectories with intended lane and final lane that have traffic slower than vehicle's target speed. 
    */

    float proposed_speed_intended = lane_speed(predictions, data["intended_lane"]);
    if (proposed_speed_intended < 0) {
        proposed_speed_intended = vehicle.target_speed;
    }

    float proposed_speed_final = lane_speed(predictions, data["final_lane"]);
    if (proposed_speed_final < 0) {
        proposed_speed_final = vehicle.target_speed;
    }
    
    float cost = (2.0*vehicle.target_speed - proposed_speed_intended - proposed_speed_final)/vehicle.target_speed;

    return cost;
}

float lane_speed(const map<int, vector<Vehicle>> & predictions, int lane) {
    /*
    All non ego vehicles in a lane have the same speed, so to get the speed limit for a lane,
    we can just find one vehicle in that lane.
    */
    for (map<int, vector<Vehicle>>::const_iterator it = predictions.begin(); it != predictions.end(); ++it) {
        int key = it->first;
        Vehicle vehicle = it->second[0];
        if (vehicle.lane == lane && key != -1) {
            return vehicle.v;
        }
    }
    //Found no vehicle in the lane
    return -1.0;
}

float calculate_cost(const Vehicle & vehicle, const map<int, vector<Vehicle>> & predictions, const vector<Vehicle> & trajectory) {
    /*
    Sum weighted cost functions to get total cost for trajectory.
    */
    map<string, float> trajectory_data = get_helper_data(vehicle, trajectory, predictions);
    float cost = 0.0;

    //Add additional cost functions here.
    vector< function<float(const Vehicle & , const vector<Vehicle> &, const map<int, vector<Vehicle>> &, map<string, float> &)>> cf_list = {goal_distance_cost, inefficiency_cost};
    vector<float> weight_list = {REACH_GOAL, EFFICIENCY};
    
    for (int i = 0; i < cf_list.size(); i++) {
        float new_cost = weight_list[i]*cf_list[i](vehicle, trajectory, predictions, trajectory_data);
        cost += new_cost;
    }

    return cost;

}

map<string, float> get_helper_data(const Vehicle & vehicle, const vector<Vehicle> & trajectory, const map<int, vector<Vehicle>> & predictions) {
    /*
    Generate helper data to use in cost functions:
    indended_lane: the current lane +/- 1 if vehicle is planning or executing a lane change.
    final_lane: the lane of the vehicle at the end of the trajectory.
    distance_to_goal: the distance of the vehicle to the goal.

    Note that indended_lane and final_lane are both included to help differentiate between planning and executing
    a lane change in the cost functions.
    */
    map<string, float> trajectory_data;
    Vehicle trajectory_last = trajectory[1];
    float intended_lane;

    if (trajectory_last.state.compare("PLCL") == 0) {
        intended_lane = trajectory_last.lane + 1;
    } else if (trajectory_last.state.compare("PLCR") == 0) {
        intended_lane = trajectory_last.lane - 1;
    } else {
        intended_lane = trajectory_last.lane;
    }

    float distance_to_goal = vehicle.goal_s - trajectory_last.s;
    float final_lane = trajectory_last.lane;
    trajectory_data["intended_lane"] = intended_lane;
    trajectory_data["final_lane"] = final_lane;
    trajectory_data["distance_to_goal"] = distance_to_goal;
    return trajectory_data;
}


---- cost.h
#ifndef COST_H
#define COST_H
#include "vehicle.h"

using namespace std;

float calculate_cost(const Vehicle & vehicle, const map<int, vector<Vehicle>> & predictions, const vector<Vehicle> & trajectory);

float goal_distance_cost(const Vehicle & vehicle,  const vector<Vehicle> & trajectory,  const map<int, vector<Vehicle>> & predictions, map<string, float> & data);

float inefficiency_cost(const Vehicle & vehicle, const vector<Vehicle> & trajectory, const map<int, vector<Vehicle>> & predictions, map<string, float> & data);

float lane_speed(const map<int, vector<Vehicle>> & predictions, int lane);

map<string, float> get_helper_data(const Vehicle & vehicle, const vector<Vehicle> & trajectory, const map<int, vector<Vehicle>> & predictions);

#endif

---- road.cpp
#include <iostream>
#include "road.h"
#include "vehicle.h"
#include <math.h>
#include <map>
#include <string>
#include <iterator>


/**
 * Initializes Road
 */
Road::Road(int speed_limit, double traffic_density, vector<int> lane_speeds) {

    this->num_lanes = lane_speeds.size();
    this->lane_speeds = lane_speeds;
    this->speed_limit = speed_limit;
    this->density = traffic_density;
    this->camera_center = this->update_width/2;

}

Road::~Road() {}

Vehicle Road::get_ego() {
	
	return this->vehicles.find(this->ego_key)->second;
}

void Road::populate_traffic() {
	
	int start_s = max(this->camera_center - (this->update_width/2), 0);
	for (int l = 0; l < this->num_lanes; l++)
	{
		int lane_speed = this->lane_speeds[l];
		bool vehicle_just_added = false;
		for(int s = start_s; s < start_s+this->update_width; s++)
		{
			
			if(vehicle_just_added)
			{
				vehicle_just_added = false;
			}
			if(((double) rand() / (RAND_MAX)) < this->density)
			{
				
				Vehicle vehicle = Vehicle(l,s,lane_speed,0);
				vehicle.state = "CS";
				this->vehicles_added += 1;
				this->vehicles.insert(std::pair<int,Vehicle>(vehicles_added,vehicle));
				vehicle_just_added = true;
			}
		}
	}
	
}

void Road::advance() {
	
	map<int ,vector<Vehicle> > predictions;

	map<int, Vehicle>::iterator it = this->vehicles.begin();
    while(it != this->vehicles.end())
    {
        int v_id = it->first;
        vector<Vehicle> preds = it->second.generate_predictions();
        predictions[v_id] = preds;
        it++;
    }
	it = this->vehicles.begin();
	while(it != this->vehicles.end())
    {
    	int v_id = it->first;
        if(v_id == ego_key)
        {   
        	vector<Vehicle> trajectory = it->second.choose_next_state(predictions);
        	it->second.realize_next_state(trajectory);
        }
        else {
            it->second.increment(1);
        }
        it++;
    }
    
}


void Road::add_ego(int lane_num, int s, vector<int> config_data) {
	
	map<int, Vehicle>::iterator it = this->vehicles.begin();
    while(it != this->vehicles.end())
    {
    	int v_id = it->first;
        Vehicle v = it->second;
        if(v.lane == lane_num && v.s == s)
        {
        	this->vehicles.erase(v_id);
        }
        it++;
    }
    Vehicle ego = Vehicle(lane_num, s, this->lane_speeds[lane_num], 0);
    ego.configure(config_data);
    ego.state = "KL";
    this->vehicles.insert(std::pair<int,Vehicle>(ego_key,ego));
    
}

void Road::display(int timestep) {

    Vehicle ego = this->vehicles.find(this->ego_key)->second;
    int s = ego.s;
    string state = ego.state;

    this->camera_center = max(s, this->update_width/2);
    int s_min = max(this->camera_center - this->update_width/2, 0);
    int s_max = s_min + this->update_width;

    vector<vector<string> > road;

    for(int i = 0; i < this->update_width; i++)
    {
        vector<string> road_lane;
        for(int ln = 0; ln < this->num_lanes; ln++)
        {
            road_lane.push_back("     ");
        }
        road.push_back(road_lane);

    }

    map<int, Vehicle>::iterator it = this->vehicles.begin();
    while(it != this->vehicles.end())
    {

        int v_id = it->first;
        Vehicle v = it->second;

        if(s_min <= v.s && v.s < s_max)
        {
            string marker = "";
            if(v_id == this->ego_key)
            {
                marker = this->ego_rep;
            }
            else
            {
                
                stringstream oss;
                stringstream buffer;
                buffer << " ";
                oss << v_id;
                for(int buffer_i = oss.str().length(); buffer_i < 3; buffer_i++)
                {
                    buffer << "0";
                
                }
                buffer << oss.str() << " ";
                marker = buffer.str();
            }
            road[int(v.s - s_min)][int(v.lane)] = marker;
        }
        it++;
    }
    ostringstream oss;
    oss << "+Meters ======================+ step: " << timestep << endl;
    int i = s_min;
    for(int lj = 0; lj < road.size(); lj++)
    {
        if(i%20 ==0)
        {
            stringstream buffer;
            stringstream dis;
            dis << i;
            for(int buffer_i = dis.str().length(); buffer_i < 3; buffer_i++)
            {
                 buffer << "0";
            }
            
            oss << buffer.str() << dis.str() << " - ";
        }
        else
        {
            oss << "      ";
        }          
        i++;
        for(int li = 0; li < road[0].size(); li++)
        {
            oss << "|" << road[lj][li];
        }
        oss << "|";
        oss << "\n";
    }
    
    cout << oss.str();

}


---- road.h
#include <iostream>
#include <random>
#include <sstream>
#include <fstream>
#include <math.h>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <iterator>
#include "vehicle.h"

using namespace std;

class Road {
public:

	int update_width = 70;

  	string ego_rep = " *** ";

  	int ego_key = -1;

  	int num_lanes;

    vector<int> lane_speeds;

    int speed_limit;

    double density;

    int camera_center;

    map<int, Vehicle> vehicles;

    int vehicles_added = 0;

    /**
  	* Constructor
  	*/
  	Road(int speed_limit, double traffic_density, vector<int> lane_speeds);

  	/**
  	* Destructor
  	*/
  	virtual ~Road();

  	Vehicle get_ego();

  	void populate_traffic();

  	void advance();

  	void display(int timestep);

  	void add_ego(int lane_num, int s, vector<int> config_data);

  	void cull();

};


---------- 
